#!/usr/bin/env python3

from functools import reduce
import json, multiprocessing, os, re, sys, math
from subprocess import Popen, PIPE
from pprint import pprint
from types import *
import terms

def run(testDir, n):
    baseDir = get_basedir(testDir)
    cuterScript = os.path.join(baseDir, "cuter")
    separator = "=== Inputs That Lead to Runtime Errors ==="
    bifSeparator = "=== BIFs Currently without Symbolic Interpretation ==="

    for i, test in enumerate(get_tests(testDir)):
        if n is not None and n != i + 1:
            continue
        # Set the default values for optional parameters.
        for param in ["withUtestBin", "validate", "withProper"]:
            if not param in test:
                test[param] = False
        # Get the runtime options.
        opts = get_options(test, testDir)
        # Run the test.
        cmd = "{} {} {} '{}' -d {} {} -m --sorted-errors".format(
          cuterScript, test["module"], test["function"], test["args"], test["depth"], opts
        )
        print("\n\033[00;34m[Test #{}]\033[00m\n{}".format(i + 1, cmd))
        if "skip" in test and test["skip"]:
            print("\033[01;35mSkipping ...\033[00m")
            continue
        p = Popen(cmd, stdin=PIPE, stdout=PIPE, shell=True)
        output = p.communicate()[0].decode()
        # Validate the presence of errors or not.
        parts = output.strip().split(separator)
        if test["errors"]:
            if len(parts) != 2:
                printOutputAndExit(output)
        else:
            if len(parts) != 1:
                printOutputAndExit(output)
            else:
                continue
        interesting = parts[1]
        # Validate the BIFs.
        if "bifs" in test:
            bifs = test["bifs"]
            bifParts = interesting.split(bifSeparator)
            interesting = bifParts[0].strip()
            bifParts = bifParts[1].strip().split("\n")
            if len(bifParts) != len(bifs):
                printOutputAndExit(output)
            if set([bif.strip() for bif in bifParts]) != set(bifs):
                printOutputAndExit(output)
        # Validate the errors found.
        solutions = interesting.strip().split("\n")
        found = filter_funs(get_matches(solutions))
        diffMode = False if "nondeterministic" in test and test["nondeterministic"] else True
        if not validate(test["arity"], diffMode, found, test["solutions"]):
            printOutputAndExit(output)
        # Extract the solver statistics.
        if "solver" in test:
            got = get_solver_stats(output)
            if not validate_solver_stats(test["solver"], got):
                printSolverStatsAndExit(test["solver"], got)

def get_solver_stats(text: str) -> str:
    def extract(regex):
        m = re.search(regex, text, re.MULTILINE | re.DOTALL)
        return int(m.group("n"), 10) if m and m.group("n") else 0
    all_stats = {
        "SAT": extract(r"solver\/status.*- SAT: (?P<n>\d+)"),
        "UNSAT": extract(r"solver\/status.*- UNSAT: (?P<n>\d+)"),
        "TIMEOUT": extract(r"solver\/status.*- TIMEOUT: (?P<n>\d+)"),
        "UNKNOWN": extract(r"solver\/status.*- UNKNOWN: (?P<n>\d+)"),
    }
    return {k: v for k, v in all_stats.items() if v}

def validate_solver_stats(expected, got):
  for k, v in expected.items():
      if not k in got or got[k] != v:
          return False
  for k, v in got.items():
      if not k in expected or expected[k] != v:
          return False
  return True

def get_matches(solutions):
    pat = r"(\s*(?P<vars>\w+\s*=\s*.+)\s*,\s*)?\w+:\w+\((?P<mfa>.*)\)"
    matches = []
    for solution in solutions:
        m = re.search(pat, solution)
        vs = m.group("vars").lstrip("31m") if m.group("vars") else ""
        matches.append((vs, "[" + m.group("mfa") + "]"))
    return matches

def filter_funs(found):
    filtered = [f for f in found if not "#Fun" in f[1]]
    if len(found) > len(filtered):
        print("[INFO] Initial function argument filtered from errors.")
    return filtered

def get_tests(testDir):
    testsJson = os.path.join(testDir, "ftests.json")
    with open(testsJson) as fd:
        return json.load(fd)["tests"]

def get_options(test, testDir):
    # Set the base options.
    nCores = multiprocessing.cpu_count()
    defaultOpts = "-p {} -s {}".format(min(nCores, 2), nCores * 2)
    opts = test["opts"] if "opts" in test else defaultOpts
    # Add the extra paths.
    ftestEbin = os.path.join(testDir, "ftest", "ebin")
    extraPaths = [ftestEbin]
    if test["withUtestBin"]:
        utestEbin = os.path.join(testDir, "utest", "ebin")
        extraPaths.append(utestEbin)
    if test["withProper"]:
        properEbin = os.path.join(get_basedir(testDir), "lib", "proper", "ebin")
        extraPaths.append(properEbin)
    opts += " -pa {}".format(" ".join(extraPaths))
    # Add the whitelist.
    if "whitelist" in test:
        whitelist = os.path.join(testDir, "ftest", "whitelist", test["whitelist"] + ".txt")
        opts += " -w {}".format(whitelist)
    # Add extra options.
    if "xopts" in test:
        opts += " {}".format(test["xopts"])
    return opts

def get_basedir(testDir):
    return testDir[:-len('/test')]

def validate(arity, diffMode, found, expected):
    """
    Checks if the found erroneous inputs cover all the expected conditions.
    Parameters:
        arity : integer
        diffMode : bool
        found : list of string * string tuples
        expected : list of string
    """
    allfound = set([])
    for f in found:
        matched = set([r for r in expected if is_expected_input(arity, diffMode, f, str(r))])
        if len(matched) == 0:
            return False
        allfound = allfound | matched
    return len(expected) == len(allfound)

def is_expected_input(arity, diffMode, args, cond):
    """
    Checks if an erroneous input satisfies an expected condition.
    Parameters:
        arity : integer
        diffMode : bool
        args : string * string
        cond : string
    """
    vs, mfa = args
    if diffMode:
        return mfa == cond
    else:
        pms = ",".join(["x{}".format(i + 1) for i in range(arity)])
        cond = cond.replace("$", "x")
        try:
            d = {}
            nm = locals().copy()
            if vs:
                vassign = "d=terms.parse('{}')".format(vs)
                exec(vassign, globals(), nm)
            assign = "[{}]=terms.parse_with_vars('{}', d)".format(pms, mfa)
            exec(assign, globals(), nm)
            return eval(cond, {**globals(), **nm})
        except Exception as e:
            return False

def printOutputAndExit(out):
    print("OUTPUT MISMATCH")
    print("=================================================================")
    print(out.strip())
    print("=================================================================")
    sys.exit(1)

def printSolverStatsAndExit(expected, got):
    print("SOLVER MISMATCH")
    print("=================================================================")
    print("EXPECTED:", expected)
    print("GOT:", got)
    print("=================================================================")
    sys.exit(1)

if __name__ == "__main__":
    fn = lambda x: x.startswith("--no=")
    xs = list(map(int, filter(None, list(filter(fn, sys.argv))[0].split("--no="))))
    n = xs[0] if len(xs) > 0 else None
    testDir = os.path.dirname(os.path.realpath(__file__))
    run(testDir, n)
    sys.exit(0)
