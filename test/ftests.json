{
    "tests": [
        {
            "module": "bitstr",
            "function": "f11",
            "args": "[0]",
            "depth": "9",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1 % (1 << 7) == 42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f12",
            "args": "[0, 0, 0]",
            "depth": "14",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$1 % (1 << 2) == 0 and $2 % (1 << 3) == 5 and $3 % (1 << 3) == 2"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f13",
            "args": "[0, 0, 0]",
            "depth": "24",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$3 < 0",
                "$2 < 0",
                "((5 << ($2 + $3)) + (($1 % (1 << $2)) << $3) + (2 % (1 << $3)) == 186) and $3 >= 0 and $2 >= 0"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f13a",
            "args": "[0, 0, 0]",
            "depth": "24",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "((5 << ($2 + $3)) + (($1 % (1 << $2)) << $3) + (2 % (1 << $3)) == 186) and $3 >= 0 and $2 >= 0"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "enc_type_mismatch",
            "args": "[foo, 0]",
            "depth": "15",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "not isinstance($1, int)",
                "$2 < 0",
                "(($1 % (1 << $2))  == 42) and isinstance($1, int) and $2 >= 0"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f21",
            "args": "[<<>>]",
            "depth": "6",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[<<0,42:7>>]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f22",
            "args": "[<<>>, 42]",
            "depth": "9",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == bin(42 % (1 << $2))[2:].zfill($2) if $2 > 0 else \"\""
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f23",
            "args": "[0, 0]",
            "depth": "8",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 % (1 << 5) == 9 and $2 == 5"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f24",
            "args": "[<<>>, 0]",
            "depth": "9",
            "errors": true,
            "arity": 2,
            "solutions": [
                "[<<42:6>>, 6]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f24a",
            "args": "[<<>>, -1]",
            "depth": "30",
            "errors": true,
            "arity": 2,
            "solutions": [
                "[<<\"*\">>, -3]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f25",
            "args": "[<<>>, 0]",
            "depth": "9",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == bin(42 % (1 << $2))[2:].zfill($2) if $2 > 0 else \"\""
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f26",
            "args": "[<<>>, 0]",
            "depth": "11",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == bin(42 % (1 << $2))[2:].zfill($2) and $2 == 6",
                "$1[2:] == bin(42 % (1 << $2))[2:].zfill($2) and $2 > 6"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f27",
            "args": "[<<>>, 0]",
            "depth": "20",
            "errors": false,
            "arity": 2,
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f31",
            "args": "[<<>>, 0]",
            "depth": "6",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == bin($2 % (1 << 4))[2:].zfill(4)"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f32",
            "args": "[<<>>, 0, 3]",
            "depth": "12",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == \"010\" + bin($2 % (1 << $3))[2:].zfill($3) if $2 > 0 else \"\" + \"00000011\""
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f33",
            "args": "[<<>>, 0, 0, <<>>]",
            "depth": "22",
            "errors": true,
            "arity": 4,
            "nondeterministic": true,
            "solutions": [
                "$1[2:] == bin($3 % (1 << $2))[2:].zfill($2) if $2 > 0 else \"\" + $4[2:]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f34",
            "args": "[<<>>, 0]",
            "depth": "50",
            "errors": false,
            "arity": 2,
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f35",
            "args": "[<<>>]",
            "depth": "50",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f36",
            "args": "[<<>>]",
            "depth": "50",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "f37",
            "args": "[<<>>]",
            "depth": "50",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "len($1[2:]) == 42"
            ],
            "skip": false
        },
        {
            "module": "otp_int",
            "function": "obsolete",
            "args": "[erlang, length, 1]",
            "depth": "3",
            "errors": true,
            "arity": 3,
            "solutions": [
                "[ssl, negotiated_next_protocol, 1]"
            ],
            "skip": false
        },
        {
            "module": "whitelist",
            "function": "f",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-f-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[424242]"
            ],
            "skip": false
        },
        {
            "module": "whitelist",
            "function": "g",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-g-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[4242]"
            ],
            "skip": false
        },
        {
            "module": "whitelist",
            "function": "k",
            "args": "[1000]",
            "depth": "3",
            "whitelist": "whitelist-k-1",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[42]"
            ],
            "skip": false
        },
        {
            "module": "complex_spec",
            "function": "f",
            "args": "[[]]",
            "depth": "35",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[[{[1,2],[{[[1],[2]],[3.14]},2]}]]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "f",
            "args": "[[]]",
            "depth": "10",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1[0:3] == [17, 17, 42]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "g",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1 == 42",
                "not isinstance($1, int)"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "g1",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1 == 42",
                "isinstance($1, int) and $1 != 42",
                "not isinstance($1, int) and len($1) != 0"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "h",
            "args": "[1]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[17]"
            ],
            "bifs": [
                "erlang:get/1"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "f1",
            "args": "[1]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "withUtestBin": true,
            "solutions": [
                "[38.86]"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f1",
            "args": "[fun(_) -> 1 end]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1((3,)) == 42 and $1((10,)) == 17"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f2",
            "args": "[fun(_) -> 1 end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$1(($2,)) == 42 and $1(($3,)) == 17"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f3",
            "args": "[fun(_) -> 1 end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$1(($1(($2,)),)) == 42 and $1(($1(($3,)),)) == 17"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f41",
            "args": "[fun(_) -> fun(_) -> 1 end end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "not isinstance($1(($2,)), LambdaType)",
                "$1(($2,))(($3,)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f42",
            "args": "[fun(_) -> fun(_) -> 1 end end, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "not isinstance($1(($2,)), LambdaType)",
                "$1(($2,))(($3,)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f5",
            "args": "[fun(_,_,_) -> 1 end, 0, 0, 0]",
            "depth": "2",
            "errors": true,
            "arity": 4,
            "nondeterministic": true,
            "solutions": [
                "$1(($2, $3, $4,)) == 42 and $1(($4, $3, $2,)) == 17"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f6",
            "args": "[0]",
            "depth": "15",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1 == 42",
                "$1((0,)) == 42",
                "$1((0,))((0,)) == 42",
                "$1((0,))((0,))((0,)) == 42",
                "$1((0,))((0,))((0,))((0,)) == 42",
                "$1((0,))((0,))((0,))((0,))((0,)) == 42",
                "$1((0,))((0,))((0,))((0,))((0,))((0,)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f7",
            "args": "[fun(_,_) -> 1 end, []]",
            "depth": "6",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "reduce(lambda a, b, f = $1: f((b,a,)), $2 if isinstance($2, list) else list(map(ord, $2)), 0) == 42 and len($2) == 1",
                "reduce(lambda a, b, f = $1: f((b,a,)), $2 if isinstance($2, list) else list(map(ord, $2)), 0) == 42 and len($2) == 2"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f8",
            "args": "[fun(_) -> true end, [1]]",
            "depth": "4",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "len($2) == 0",
                "len($2) > 0 and len([t for t in $2 if $1((t,))]) == 0"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f91",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "4",
            "opts": "-p 1 -s 1",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "isinstance($1, LambdaType)",
                "$1(($2,)) == 42 and $3 == 1",
                "$1(($2,$2)) == 42 and $3 == 2"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f92",
            "args": "[fun(_) -> 1 end, 1]",
            "depth": "4",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "isinstance($1, LambdaType)",
                "$1(($2,)) == 42",
                "$1(($2,$2)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f10",
            "args": "[fun(_) -> 1 end]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1((1532,)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f11",
            "args": "[fun(_) -> fun(_) -> 1 end end, fun(_) -> fun(_) -> 1 end end, 1]",
            "depth": "4",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "not isinstance($1((0,)), LambdaType)",
                "not isinstance($2((0,)), LambdaType)",
                "not isinstance($1((0,))(($3,)), int) or isinstance($1((0,))(($3,)), bool)",
                "not isinstance($2((0,))(($3,)), int) or isinstance($2((0,))(($3,)), bool)",
                "$1((0,))(($3,)) + $2((0,))(($3,)) == 9"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f12",
            "args": "[fun(_) -> fun(_) -> 1 end end]",
            "depth": "4",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "not isinstance($1((lambda l: reduce(lambda l1, l2: l1 + l2, l, []),)), LambdaType)",
                "$1((lambda l: reduce(lambda l1, l2: l1 + l2, l, []),))((1,)) == 42"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f1ws",
            "args": "[fun(_) -> 1 end]",
            "depth": "10",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "funs",
            "function": "f2ws",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "10",
            "errors": false,
            "arity": 3,
            "skip": false
        },
        {
            "module": "funs",
            "function": "f3ws",
            "args": "[fun(_) -> 1 end, 1, 1]",
            "depth": "10",
            "errors": false,
            "arity": 3,
            "skip": false
        },
        {
            "module": "funs",
            "function": "f5ws",
            "args": "[fun(_,_,_) -> 1 end, 0, 0, 0]",
            "depth": "2",
            "errors": false,
            "arity": 4,
            "skip": false
        },
        {
            "module": "funs",
            "function": "f1hs",
            "args": "[fun(_) -> 1 end]",
            "depth": "2",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "$1((3,)) == 42 and $1((10,)) == 17"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f13a",
            "args": "[fun(_) -> 1 end, {}]",
            "depth": "5",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "(not isinstance($1(($2,)), int) or $1(($2,)) != 1) and $2 == (4, 2,)"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f13b",
            "args": "[fun(_) -> 1 end, <<>>]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "(not isinstance($1(($2,)), int) or $1(($2,)) != 1) and $2[2:] == bin(5 % (1 << 6))[2:].zfill(6)"
            ],
            "skip": false
        },
        {
            "module": "sum",
            "function": "classify",
            "args": "[[]]",
            "depth": "25",
            "withProper": true,
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "sum($1) == 4711"
            ],
            "skip": false
        },
        {
            "module": "sum",
            "function": "classify2",
            "args": "[[]]",
            "depth": "25",
            "withProper": true,
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "sum($1) == 4711"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "f14",
            "args": "[fun(_) -> 1 end, []]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1(($2,)) == [1, 2, 3]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "eval_nif",
            "args": "[ok]",
            "depth": "25",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbit_sz",
            "args": "[<<>>]",
            "depth": "15",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "len($1[2:]) >= 4"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbyte_sz",
            "args": "[<<>>]",
            "depth": "42",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "len($1[2:]) > 8"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbsl",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "[21, 1]", "[42, 0]", "[84, -1]", "[168, -2]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbsl_big",
            "args": "[1]",
            "depth": "100",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[7716049313272]",
                "[7716049313271604931327160494]",
                "[77160493132716049313271604931327160493132716049313271604931327160494]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbsr",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "solutions": [
                "[21, -1]", "[42, 0]", "[84, 1]", "[168, 2]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbsr_big",
            "args": "[1]",
            "depth": "100",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[1975308624197536]",
                "[1975308624197530862419753086256]",
                "[19753086241975308624197530862419753086241975308624197530862419753086256]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbnot",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[-43]"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbnot_big",
            "args": "[1]",
            "depth": "50",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[-1234567890123456789012345678901234567890123456789012345678901234567892]",
                "[-123456789012345678901234567892]",
                "[-123456789012347]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "trunc1",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "2.5 < $1 and $1 < 3"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "trunc2",
            "args": "[1]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "nondeterministic": true,
            "solutions": [
                "-43 < $1 and $1 < -42.5"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fband",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 & $2 == 42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fband_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 & $2 == -42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fband2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 & $2 == 1267650600228229401496703205376"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fband2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 & $2 == -1299341865233935136534120785510400"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fband3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "($1 + $2) & ($1 - $2) == 1208425819634629144706176"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == 42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == 546546546546546"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == 1321678065467065468706546708964"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == -42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == -546546546546546"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbxor3_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 ^ $2 == -1321678065467065468706546708964"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbor",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 | $2 == 42"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbor2",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 | $2 == 654654621354008904"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbor3",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 | $2 == 132167806349873198573065468706546708964"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbor_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 | $2 == -3"
            ],
            "skip": false
        },
        {
            "module": "bitstr",
            "function": "fbor2_neg",
            "args": "[1, 1]",
            "depth": "25",
            "errors": true,
            "arity": 2,
            "nondeterministic": true,
            "solutions": [
                "$1 | $2 == -2581098572349081592347598712638"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "l2i",
            "args": "[[49]]",
            "depth": "90",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[\"42\"]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "l2in",
            "args": "[[49, 48]]",
            "depth": "90",
            "errors": true,
            "arity": 1,
            "whitelist": "collection-l2in-1",
            "solutions": [
                "[\"42\"]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "to_upper",
            "args": "[[]]",
            "depth": "7",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "collection",
            "function": "k",
            "args": "[0,0]",
            "depth": "10",
            "errors": true,
            "arity": 2,
            "solutions": [
                "[1, 2]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "k2",
            "args": "[0,1,0]",
            "depth": "50",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$2 * 0.7 == $1",
                "$3 % $2 == 3"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "p",
            "args": "[0]",
            "depth": "50",
            "errors": true,
            "arity": 3,
            "solutions": [
                "[8]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "a2l",
            "args": "[ok]",
            "depth": "17",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[foo]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "test_alias",
            "args": "[1]",
            "depth": "20",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[5]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "fclist",
            "args": "[nil]",
            "depth": "10",
            "errors": true,
            "arity": 1,
            "xopts": "--disable-type-normalization",
            "solutions": [
                "[{42,{17,nil}}]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "fweird",
            "args": "[ok]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[[42,[ok],[17,ok,ok,[1,2]]]]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "test_record",
            "args": "[{msg,false}]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[{msg,true}]"
            ],
            "skip": false
        },
        {
            "module": "collection",
            "function": "type_var",
            "args": "[[]]",
            "depth": "25",
            "errors": false,
            "arity": 1,
            "skip": false
        },
        {
            "module": "complex_spec",
            "function": "g",
            "args": "[[]]",
            "depth": "10",
            "errors": false,
            "arity": 1,
            "xopts": "--z3-timeout 1",
            "skip": false
        },
        {
            "module": "funs",
            "function": "mf",
            "args": "[fun(X) -> X end, fun(_) -> true end,[]]",
            "depth": "5",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "type($2((0,))) == type(True)",
                "[$1((x,)) for x in $3 if $2((x,))] != [z for z in [$1((y,)) for y in $3] if $2((z,))]"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "ff_f_g",
            "args": "[fun (F) when is_function(F, 1) -> 42 end, fun (_) -> 1 end, fun (_) -> 2 end]",
            "depth": "42",
            "errors": true,
            "arity": 3,
            "nondeterministic": true,
            "solutions": [
                "$1(($2,)) == 123 and $1(($3,)) == 456"
            ],
            "skip": false
        },
        {
            "module": "funs",
            "function": "ff_f_g_h",
            "args": "[fun (F) when is_function(F, 1) -> 42 end, fun (_) -> 1 end, fun (_) -> 2 end, fun (_) -> 3 end]",
            "depth": "42",
            "errors": true,
            "arity": 4,
            "nondeterministic": true,
            "solutions": [
                "$1(($2,)) == 123 and $1(($3,)) == 456 and $1(($4,)) == 789"
            ],
            "skip": false
        },
        {
            "module": "reduce_search_space",
            "function": "f",
            "args": "[0]",
            "depth": "25",
            "errors": true,
            "arity": 1,
            "solutions": [
                "[3]"
            ],
            "solver": {
              "SAT": 3,
              "UNSAT": 6
            },
            "skip": false
        }
    ]
}
